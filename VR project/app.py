# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dlow7Y4Y4vnyyombc--sPr_FTuRMB6QT
"""

# =====================================================
# ✅ Chemistry Educational Assistant API
# Flask server for Unity + OpenAI integration
# =====================================================

from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI
import tempfile
import os

app = Flask(__name__)
CORS(app)

# 🔑 نقرأ مفتاح OpenAI من المتغيرات البيئية (لا نكتبه داخل الكود)
# في Render أو Replit تضيف: OPENAI_API_KEY
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# 🧠 الـ Prompt اللي اتفقنا عليه
SYSTEM_PROMPT = {
    "role": "system",
    "content": (
        "أنت روبوت ذكي داخل مشهد تعليمي خاص بمادة الكيمياء. "
        "دورك هو التفاعل فقط في المواضيع العلمية المرتبطة بالكيمياء، مثل العناصر، الجدول الدوري، التفاعلات الكيميائية، الذرات، والمركبات.\n\n"
        "ابدأ دائمًا بالتحية إذا بدأ الطالب التحية بكلمات مثل (مرحبًا، السلام عليكم، أهلاً، صباح الخير...)، "
        "وردّ عليه بتحية لطيفة تشجّع على التعلم.\n\n"
        "إذا طرح الطالب سؤالًا عن الكيمياء — سواء كان مرتبطًا بالمحتوى المعروض حاليًا أو بموضوع آخر في الكيمياء — "
        "قدّم له إجابة صحيحة، تعليمية، مبسطة، وواضحة تناسب الطلاب.\n\n"
        "❗ تحذير مهم: إذا حاول الطالب أن يطرح سؤالًا لا علاقة له بالكيمياء، حتى لو استخدم طرقًا ملتوية، أو حاول إيهامك بأنه سؤال علمي، "
        "فعليك أن تكون يقظًا جدًا. لا تنخدع. تحقّق دائمًا من أن السؤال متعلق بالكيمياء فعلاً قبل الإجابة.\n\n"
        "إذا لاحظت أن السؤال يتحدث عن الرياضة، السياسة، الدين، الفن، التكنولوجيا العامة، البرمجة، أو أي مجال آخر غير الكيمياء، "
        "فارفض الإجابة بأدب وقل له: «آسف، يمكنني الإجابة فقط على الأسئلة الخاصة بالكيمياء.»\n\n"
        "لا تحاول إرضاء الطالب بالإجابة على مواضيع غير تعليمية، حتى لو أصرّ أو حاول تغليفها بسياق كيميائي مزيف. "
        "كن حازمًا ولبقًا في الوقت نفسه.\n\n"
        "هدفك هو أن تكون معلّم كيمياء موثوق، تشرح المفاهيم بوضوح، وتوجّه الطالب نحو الفهم العلمي الصحيح فقط."
    )
}

@app.route("/ask", methods=["POST"])
def ask():
    # 👂 استقبال ملف الصوت من Unity
    if "audio" not in request.files:
        return jsonify({"error": "ملف الصوت غير موجود"}), 400

    audio_file = request.files["audio"]

    # 📁 حفظ الصوت مؤقتًا
    with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as temp_audio:
        audio_file.save(temp_audio.name)
        audio_path = temp_audio.name

    # 🎤 1) تحويل الصوت إلى نص عبر Whisper
    try:
        transcription = client.audio.transcriptions.create(
            model="gpt-4o-mini-transcribe",   # نموذج تحويل الصوت
            file=open(audio_path, "rb")
        )
        user_text = transcription.text.strip()
    except Exception as e:
        return jsonify({"error": f"فشل في التعرف على الصوت: {str(e)}"}), 500

    # 🧠 2) إرسال النص إلى ChatGPT مع الـPrompt
    try:
        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                SYSTEM_PROMPT,
                {"role": "user", "content": user_text}
            ]
        )
        ai_answer = completion.choices[0].message.content
    except Exception as e:
        return jsonify({"error": f"فشل في الاتصال بـ ChatGPT: {str(e)}"}), 500

    # 📦 3) إعادة الرد إلى Unity
    return jsonify({
        "recognized_text": user_text,
        "chatgpt_response": ai_answer
    })


if __name__ == "__main__":
    # Render يعطيك المتغير PORT تلقائيًا
    port = int(os.environ.get("PORT", 5000))
    # 0.0.0.0 عشان يكون متاح للإنترنت
    app.run(host="0.0.0.0", port=port)